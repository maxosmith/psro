"""Compute exploitability using OpenSpiel."""
import pyspiel
from open_spiel.python.algorithms import best_response as openspiel_br

from psro import strategy
from psro.response_oracles.openspiel_br import utils


def exploitability(game: pyspiel.Game, players: strategy.JointStrategy):
  """."""

  if game.num_players() != 2:
    raise ValueError("Game must be a 2-player game")
  game_info = game.get_type()
  if game_info.dynamics != pyspiel.GameType.Dynamics.SEQUENTIAL:
    raise ValueError(f"The game must be turn-based, not {game_info.dynamics}")
  if game_info.utility not in (pyspiel.GameType.Utility.ZERO_SUM, pyspiel.GameType.Utility.CONSTANT_SUM):
    raise ValueError(f"The game must be constant- or zero-sum, not {game_info.utility}")

  root_state = game.new_initial_state()
  aggr_policy = utils.aggregate_joint_strategy(game, players)
  return {
      br_i: openspiel_br.CPPBestResponsePolicy(game, br_i, aggr_policy).value(root_state)
      for br_i in range(game.num_players())
  }
