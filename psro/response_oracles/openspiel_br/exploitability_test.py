"""Test suite for `exploitability`."""
import pyspiel
from absl.testing import absltest, parameterized
from marl import bots
from marl.utils import tree_utils

from psro import strategy
from psro.response_oracles.openspiel_br import exploitability


class ExploitabilityTest(parameterized.TestCase):
  """Test suite for `exploitability`."""

  def test_exploitability_kuhn_random(self):
    """Tests `exploitability`."""
    game = pyspiel.load_game("kuhn_poker")
    players = {
        0: strategy.Strategy(policies=[bots.RandomActionBot(2)], mixture=[1.0]),
        1: strategy.Strategy(policies=[bots.RandomActionBot(2)], mixture=[1.0]),
    }
    regret = exploitability.exploitability(game, players)
    tree_utils.assert_almost_equals({0: 6 / 12, 1: 5 / 12}, regret)

  def test_exploitability_kuhn_constant(self):
    """Tests `exploitability`."""
    game = pyspiel.load_game("kuhn_poker")
    players = {
        0: strategy.Strategy(policies=[bots.ConstantActionBot(0)], mixture=[1.0]),
        1: strategy.Strategy(policies=[bots.ConstantActionBot(0)], mixture=[1.0]),
    }
    regret = exploitability.exploitability(game, players)
    tree_utils.assert_almost_equals({0: 1, 1: 1}, regret)

  def test_exploitability_leduc_constant(self):
    """Tests `exploitability`."""
    game = pyspiel.load_game("leduc_poker")
    players = {
        0: strategy.Strategy(policies=[bots.ConstantActionBot(0)], mixture=[1.0]),
        1: strategy.Strategy(policies=[bots.ConstantActionBot(0)], mixture=[1.0]),
    }
    regret = exploitability.exploitability(game, players)
    tree_utils.assert_almost_equals({0: 2.0999999, 1: 2.6597222}, regret)


if __name__ == "__main__":
  absltest.main()
